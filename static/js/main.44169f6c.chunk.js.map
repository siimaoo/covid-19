{"version":3,"sources":["pages/InitialPage/index.js","App.js","serviceWorker.js","index.js"],"names":["InitialPage","useState","arr","setArr","estado","setEstado","load","setLoad","setAllCases","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","axios","get","then","a","res","addressData","data","results","components","state_code","town","err","array","docs","estados","map","element","state","push","groupArr","ordenedArr","sort","b","city_name","_","groupBy","newArr","quantity","i","length","cases","sumAllCasesMg","className","value","class","onChange","evt","target","key","count","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSAwKeA,MAnKf,WAAwB,IAAD,EACCC,mBAAS,IADV,mBACdC,EADc,KACTC,EADS,OAEOF,mBAAS,MAFhB,mBAEdG,EAFc,KAENC,EAFM,OAGGJ,oBAAS,GAHZ,mBAGdK,EAHc,KAGRC,EAHQ,OAIWN,mBAAS,GAJpB,mBAIJO,GAJI,WA2ErB,OArEAC,qBAAU,WACJC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAACC,GAAc,IAAD,EACvBA,EAASC,OAAjCC,EAD+C,EAC/CA,SAAUC,EADqC,EACrCA,UAEhBC,IAAMC,IAAN,6FAAgGH,EAAhG,YAA4GC,EAA5G,0CACGG,KADH,+BAAAC,EAAA,MACQ,WAAMC,GAAN,iBAAAD,EAAA,sDACAE,EAAcD,EAAIE,KAAKC,QAAQ,GAAGC,WAChCC,EAAqBJ,EAArBI,WAAqBJ,EAATK,KAClBtB,EAAUqB,GACVnB,GAAQ,GAJJ,2CADR,0DAOC,SAACqB,GACFvB,EAAU,MACVE,GAAQ,QAGX,IAGHE,qBAAU,WAKRQ,IAAMC,IAAI,mIACPC,MAAK,SAACE,GACL,IAAIQ,EAAQR,EAAIE,KAAKO,KACjBC,EAAU,GAEdF,EAAMG,KAAI,SAAAC,GACR,OAAOA,EAAQC,QAAU9B,GAAS2B,EAAQI,KAAKF,MAGjD,IAIIG,EAJAC,EAAaN,EAAQO,MAAK,SAAClB,EAAGmB,GAChC,OAAQnB,EAAEoB,UAAYD,EAAEC,UAAa,EAAMD,EAAEC,UAAYpB,EAAEoB,WAAc,EAAI,KAK/EJ,EAAWK,IAAEC,QAAQL,EAAY,aAEjC,IAAIM,EAAS,GAEbF,IAAET,IAAII,GAAU,SAAAH,GAEd,IADA,IAAIW,EAAW,EACNC,EAAI,EAAGA,EAAIZ,EAAQa,OAAQD,IAClCD,GAAsBX,EAAQY,GAAGE,MAGnCJ,EAAOR,KAAK,CAAE,UAAaF,EAAQ,GAAGO,UAAW,MAASI,OAG5DzC,EAAOwC,GAMb,SAAuBzC,GACrB,IAAI0C,EAAW,EAEf1C,EAAI8B,KAAI,SAAAC,GACN,OAAOW,GAAsBX,EAAQc,SAGvCvC,EAAYoC,GAXRI,CAAcjB,QAjCjB,CAAC3B,IAgDF,oCACE,yBAAK6C,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,gBAGX3C,EAAO,oCACP,yBAAK2C,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,uBACb,4BACEC,MAAO9C,EACP+C,MAAM,kBACNC,SAAU,SAACC,GAAD,OAAShD,EAAUgD,EAAIC,OAAOJ,SAExC,4BAAQA,MAAM,MAAd,QACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,oBACA,4BAAQA,MAAM,MAAd,qBACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,sBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,uBACA,4BAAQA,MAAM,MAAd,qBACA,4BAAQA,MAAM,MAAd,eACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,iBAMN,yBAAKD,UAAU,OACb,yBAAKA,UAAU,WACb,+BACE,+BACE,4BACE,sCACA,qDAIJ,+BAEI/C,EAAI8B,KAAI,SAACC,EAASsB,GAChB,OACE,wBAAIA,IAAKA,GACP,4BAAKtB,EAAQO,WACb,4BAAKP,EAAQuB,gBASzB,0DAGR,yBAAKP,UAAU,eACb,uBAAGQ,KAAK,KAAR,oBCrJDC,MANf,WACE,OACC,kBAAC,EAAD,OCOiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB1D,WACrBA,UAAU2D,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44169f6c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport './style.css'\n\nfunction InitialPage() {\n  const [arr, setArr] = useState([]);\n  const [estado, setEstado] = useState(\"AC\");\n  const [load, setLoad] = useState(false);\n  const [allCases, setAllCases] = useState(0);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let { latitude, longitude } = position.coords;\n\n        axios.get(`https://cors-anywhere.herokuapp.com/https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=e6fe8c3c899f43b3a9b271cc2c57f848`)\n          .then(async(res) => {\n            let addressData = res.data.results[0].components;\n            let { state_code, town } = addressData;\n            setEstado(state_code);\n            setLoad(true);\n          })\n      }, (err) => {\n        setEstado('AC');\n        setLoad(true);\n      })\n    }\n  }, []);\n\n\n  useEffect(() => {\n    getAllCases();\n  }, [estado]);\n\n  function getAllCases() {\n    axios.get(\"https://cors-anywhere.herokuapp.com/https://especiais.g1.globo.com/bemestar/coronavirus/mapa-coronavirus/data/brazil-cases.json\")\n      .then((res) => {\n        let array = res.data.docs;\n        let estados = []\n\n        array.map(element => {\n          return element.state === estado ? estados.push(element) : true;\n        });\n\n        let ordenedArr = estados.sort((a, b) => {\n          return (a.city_name > b.city_name) ? 1 : ((b.city_name > a.city_name) ? -1 : 0);\n        });\n\n        let groupArr;\n\n        groupArr = _.groupBy(ordenedArr, 'city_name');\n\n        let newArr = [];\n\n        _.map(groupArr, element => {\n          var quantity = 0;\n          for (let i = 0; i < element.length; i++) {\n            quantity = quantity + element[i].cases;\n          }\n\n          newArr.push({ \"city_name\": element[0].city_name, \"count\": quantity });\n        })\n\n        setArr(newArr);\n\n        sumAllCasesMg(estados);\n      })\n  }\n\n  function sumAllCasesMg(arr) {\n    let quantity = 0;\n\n    arr.map(element => {\n      return quantity = quantity + element.cases;\n    });\n\n    setAllCases(quantity);\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"card\">\n          <div className=\"card-stacked\">\n            <div className=\"card-content\">\n\n              {\n                load ? <>\n                <div className=\"row\">\n                  <div className=\"col s12\">\n                    <div className=\"input-field col s12\">\n                      <select\n                        value={estado}\n                        class=\"browser-default\"\n                        onChange={(evt) => setEstado(evt.target.value)}\n                      >\n                        <option value=\"AC\">Acre</option>\n                        <option value=\"AL\">Alagoas</option>\n                        <option value=\"AP\">Amapá</option>\n                        <option value=\"AM\">Amazonas</option>\n                        <option value=\"BA\">Bahia</option>\n                        <option value=\"CE\">Ceará</option>\n                        <option value=\"DF\">Distrito Federal</option>\n                        <option value=\"ES\">Espírito Santo</option>\n                        <option value=\"GO\">Goiás</option>\n                        <option value=\"MA\">Maranhão</option>\n                        <option value=\"MT\">Mato Grosso</option>\n                        <option value=\"MS\">Mato Grosso do Sul</option>\n                        <option value=\"MG\">Minas Gerais</option>\n                        <option value=\"PA\">Pará</option>\n                        <option value=\"PB\">Paraíba</option>\n                        <option value=\"PR\">Paraná</option>\n                        <option value=\"PE\">Pernambuco</option>\n                        <option value=\"PI\">Piauí</option>\n                        <option value=\"RJ\">Rio de Janeiro</option>\n                        <option value=\"RN\">Rio Grande do Norte</option>\n                        <option value=\"RS\">Rio Grande do Sul</option>\n                        <option value=\"RO\">Rondônia</option>\n                        <option value=\"RR\">Roraima</option>\n                        <option value=\"SC\">Santa Catarina</option>\n                        <option value=\"SP\">São Paulo</option>\n                        <option value=\"SE\">Sergipe</option>\n                        <option value=\"TO\">Tocantins</option>\n                      </select>                      \n                    </div>\n                  </div>\n                </div>\n\n                  <div className=\"row\">\n                    <div className=\"col s12\">\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Cidade</th>\n                            <th>Quantidade de Casos</th>\n                          </tr>\n                        </thead>\n\n                        <tbody>\n                          {\n                            arr.map((element, key) => {\n                              return (\n                                <tr key={key}>\n                                  <td>{element.city_name}</td>\n                                  <td>{element.count}</td>\n                                </tr>\n                              )\n                            })\n                          }\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                </> : <h4>Buscando informações</h4>\n              }\n\n              <div className=\"card-action\">\n                <a href=\"#\">Fonte: G1</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default InitialPage;\n","import React from 'react';\nimport InitialPage from './pages/InitialPage/index';\n\nfunction App() {\n  return (\n   <InitialPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}